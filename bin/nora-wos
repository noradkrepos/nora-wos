#!/usr/bin/perl

use strict;
use warnings;
use NORA::WOS;

my $wos = new NORA::WOS ();
my $comm;
my @args = ();
if (@ARGV) {
    ($comm, @args) = &map_comm (@ARGV);
} else {
    &usage ();
}
if ($comm eq 'system-backup') {
    my $log = &log ($comm);
    my $sta = &log_start ($log);
    system ("/usr/sbin/nora-wos-system-backup 2>&1 | tee -a $log");
    &log_end ($log, $sta);
    exit (0);
}
if ($comm eq 'fetch-danish-records') {
    print (STDERR "Do you really want to harvest all WoS records? This should only be done if there is a major change in WoS! [y/N]: ");
    my $ans = <STDIN>;
    if ($ans !~ m/^y$/i) {
        warn ("Aborting\n");
        exit (0);
    }
    my $log = &log ($comm);
    my $sta = &log_start ($log);
    my $args = join (' ', @args);
    system ("/usr/sbin/nora-wos-fetch-danish-records --all $args 2>&1 | tee -a $log");
    &log_end ($log, $sta);
    exit (0);
}
if ($comm eq 'update-danish-records') {
    my $log = &log ($comm);
    my $sta = &log_start ($log);
    system ("/usr/sbin/nora-wos-fetch-danish-records 2>&1 | tee -a $log");
    &log_end ($log, $sta);
    exit (0);
}
if ($comm eq 'fetch-indicators') {
    my $log = &log ($comm);
    my $sta = &log_start ($log);
    my $args = join (' ', @args);
    system ("/usr/sbin/nora-wos-fetch-indicators $args 2>&1 | tee -a $log");
    &log_end ($log, $sta);
    exit (0);
}
if ($comm eq 'generate-orgs-doi') {
    my $log = &log ($comm);
    my $sta = &log_start ($log);
    my $args = join (' ', @args);
    system ("/usr/sbin/nora-wos-orgs-doi $args 2>&1 | tee -a $log");
    &log_end ($log, $sta);
    exit (0);
}
if ($comm eq 'rdf-generate') {
    my $log = &log ($comm);
    my $sta = &log_start ($log);
    system ("/usr/sbin/nora-wos-rdf-gen-mongo 2>&1 | tee -a $log");
    &log_end ($log, $sta);
    exit (0);
}
if ($comm eq 'rdf-diff') {
    my $log = &log ($comm);
    my $sta = &log_start ($log);
    my $dir;
    if (open (my $fls, "ls -d /var/lib/nora-wos/rdf/* |")) {
        while (<$fls>) {
            chomp;
            $dir = $_;
        }
        close ($fls);
    } else {
        $wos->log ('f', 'failed to list files in /var/lib/nora-wos/rdf/: %s', $!);
        exit (1);
    }
    my $pre;
    if ($dir =~ m/([0-9]+)$/) {
        my $num = $1;
        $pre = $dir;
        $pre =~ s/[0-9]+/sprintf ('%03d', $num - 1)/e;
        if (!-d $pre) {
            $wos->log ('f', 'previous directory not found: %s', $pre);
            exit (1);
        }
    } else {
        $wos->log ('f', 'unexpected format for: %s', $dir);
        exit (1);
    }
    if (open (my $fls, "ls $dir |")) {
        while (<$fls>) {
            chomp;
            if (m/\.nt$/) {
                system ("/usr/sbin/nora-wos-rdf-diff $pre/$_ $dir/$_ 2>&1 | tee -a $log");
            } else {
                $wos->log ('i', 'skipping file: %s', $_);
            }
        }
        close ($fls);
    } else {
        $wos->log ('f', 'failed to list files in /var/lib/nora-wos/rdf/: %s', $!);
        exit (1);
    }
    &log_end ($log, $sta);
    exit (0);
}
if ($comm eq 'rdf-update') {
    if (!@args) {
        &usage ();
    }
    my $run = sprintf ('%03d', $args[0]);
    shift (@args);
    my $args = join (' ', @args);
    if ((!$run) || (!-d "/var/lib/nora-wos/staging/$run")) {
        &usage ('could not find a valid run in /var/lib/nora-wos/staging/ using run number: "%s"', $args[0]);
    }
    my $log = &log ($comm);
    my $sta = &log_start ($log);
    if (open (my $fls, "ls -d /var/lib/nora-wos/staging/$run/del/* 2> /dev/null |")) {
        while (<$fls>) {
            chomp;
            system ("/usr/sbin/nora-wos-rdf-update --chunk 10000 --delete $args $_ 2>&1 | tee -a $log");
        }
        close ($fls);
    } else {
        $wos->log ('f', 'failed to list files in /var/lib/nora-wos/staging/%s/del/: %s', $run, $!);
        exit (1);
    }
    if (open (my $fls, "ls -d /var/lib/nora-wos/staging/$run/add/* 2> /dev/null |")) {
        while (<$fls>) {
            chomp;
            system ("/usr/sbin/nora-wos-rdf-update $args $_ 2>&1 | tee -a $log");
        }
        close ($fls);
    } else {
        $wos->log ('f', 'failed to list files in /var/lib/nora-wos/staging/%s/add/: %s', $run, $!);
        exit (1);
    }
    &log_end ($log, $sta);
    exit (0);
}
if ($comm eq 'view-rec') {
    my $ut = shift (@args);
    $ut =~ s/^wos-/WOS:/;
    if ($ut !~ m/^WOS:/) {
        $ut = 'WOS:' . $ut;
    }
    system ('/usr/sbin/nora-wos-view-rec', $ut);
    exit (0);
}
if ($comm eq 'view-ind') {
    my $ut = shift (@args);
    $ut =~ s/^wos-/WOS:/;
    if ($ut !~ m/^WOS:/) {
        $ut = 'WOS:' . $ut;
    }
    system ('/usr/sbin/nora-wos-view-ind', $ut);
    exit (0);
}
die ("fatal: missing command: $comm\n");
exit (0);

sub log
{
    my ($name) = @_;

    my $root = '/var/log/nora-wos';
    my ($sec, $min, $hour, $day, $mon, $year) = localtime (time);
    my $date = sprintf ('%04d-%02d-%02d', 1900 + $year, $mon + 1, $day);
    my $n = '01';
    while (-e "$root/$name-$date-$n.log") {
        $n = sprintf ('%02d', ($n + 1));
    }
    return ("$root/$name-$date-$n.log");
}

sub log_start
{
    my ($log) = @_;

    my $start = time;
    my ($sec, $min, $hour, $day, $mon, $year) = localtime ($start);
    open (my $flog, "> $log");
    printf($flog "%04d-%02d-%02d %02d:%02d:%02d i start\n", 1900 + $year, $mon + 1, $day, $hour, $min, $sec);
    close ($flog);
    printf(STDERR "%04d-%02d-%02d %02d:%02d:%02d i start\n", 1900 + $year, $mon + 1, $day, $hour, $min, $sec);
    return ($start);
}

sub log_msg
{
    my ($log, $level, $msg, @args) = @_;

    my ($sec, $min, $hour, $day, $mon, $year) = localtime ();
    open (my $flog, ">> $log");
    printf($flog "%04d-%02d-%02d %02d:%02d:%02d %s $msg\n", 1900 + $year, $mon + 1, $day, $hour, $min, $sec, $level, @args);
    close ($flog);
    printf(STDERR "%04d-%02d-%02d %02d:%02d:%02d %s $msg\n", 1900 + $year, $mon + 1, $day, $hour, $min, $sec, $level, @args);
}

sub log_end
{
    my ($log, $start) = @_;

    my $time = time;
    my ($sec, $min, $hour, $day, $mon, $year) = localtime ($time);
    open (my $flog, ">> $log");
    my $elapse = $time - $start;
    printf($flog "%04d-%02d-%02d %02d:%02d:%02d i end - elapse %02d:%02d:%02d (%5d sec)\n", 1900 + $year, $mon + 1, $day, $hour, $min, $sec,
           ($elapse / 3600), ($elapse % 3600 / 60), ($elapse % 3600 % 60), $elapse);
    close ($flog);
    printf(STDERR "%04d-%02d-%02d %02d:%02d:%02d i end - elapse %02d:%02d:%02d (%5d sec)\n", 1900 + $year, $mon + 1, $day, $hour, $min, $sec,
           ($elapse / 3600), ($elapse % 3600 / 60), ($elapse % 3600 % 60), $elapse);
}

sub map_comm
{
    my ($grp, $comm, @args) = @_;

    my $Comm = {
        system => {
            'backup'               => 'system-backup',
        },
        fetch => {
            'danish-records'       => 'fetch-danish-records',
            'indicators'           => 'fetch-indicators',
        },
        update => {
            'danish-records'       => 'update-danish-records',
        },
        generate => {
            'orgs-doi'             => 'generate-orgs-doi',
        },
        rdf => {
            'generate'             => 'rdf-generate',
            'diff'                 => 'rdf-diff',
            'update'               => 'rdf-update',
        },
        view => {
            'record'               => 'view-rec',
            'indicators'           => 'view-ind',
        },
    };
    my $match = 0;
    my $group = '';
    foreach my $g (keys (%{$Comm})) {
        if ($grp eq substr ($g, 0, length ($grp))) {
            $match++;
            $group = $g;
        }
    }
    if ($match == 0) {
        &usage ("fatal: command group not found: '%s'", $grp);
    }
    if ($match > 1) {
        &usage ("fatal: ambiguous command group: '%s'", $grp);
    }
    if (!$comm) {
        &usage ();
    }
    $match = 0;
    my $command = '';
    foreach my $c (keys (%{$Comm->{$group}})) {
        if ($comm eq substr ($c, 0, length ($comm))) {
            $match++;
            $command = $Comm->{$group}{$c};
        }
    }
    if ($match == 0) {
        &usage ("fatal: command not found: '%s %s'", $group, $comm);
    }
    if ($match > 1) {
        &usage ("fatal: ambiguous command: '%s %s'", $group, $comm);
    }
    return ($command, @args);
}

sub usage
{
    my ($msg, @args) = @_;

    if ($msg) {
        printf (STDERR "\n" . $msg . "\n\n", @args);
    }
    warn ("usage:\n\n");

    warn ("       DATA MANAGEMENT\n");
    warn ("       ---------------\n");
    warn ("       nora-wos system     backup\n\n");

    warn ("       nora-wos fetch      danish-records   (All records, only first time or for format changes)\n\n");
    warn ("       nora-wos update     danish-records   (On the 19th each month)\n");
    warn ("       nora-wos generate   orgs-doi         (generate data for mapping)\n\n");
    warn ("       nora-wos fetch      indicators       (after update of Incites)\n\n\n");

    warn ("       RDF & VIVO PROCESSING\n");
    warn ("       ---------------------\n");
    warn ("       nora-wos rdf        generate\n");
    warn ("       nora-wos rdf        diff\n");
    warn ("       nora-wos rdf        update <run-number>\n\n\n");

    warn ("       MISCELLANEOUS\n");
    warn ("       -------------\n");
    warn ("       nora-wos view       record <UT>\n");
    warn ("       nora-wos view       indicators <UT>\n\n");
    exit (1);
}

